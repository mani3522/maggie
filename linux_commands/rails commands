rails commands

.where(first_name: 'Test')

.where(user_id:[10596,10595])

.where("orders_count = ?", params[:orders])

.where("orders_count = ? AND locked = ?", params[:orders], false)

.where.not(locked: true)

IN query with subsitute params
j.applicants.where("DATE(created_at) <= ? AND status IN (?) ", Date.today - 1.year, [3,4,5]) 

M.where(locked: true).or(M.where(orders_count: [1,3,5]))

.find([1, 10])

.order(:first_name)

.order(:name).reverse_order --> order by name desc


.take ==> Limit 1

.find_by first_name: 'does not exist' -->  .where(first_name: 'Lifo')

.find_by! first_name: 'does not exist' --> .where(first_name: 'Lifo') , but raise exception when it is not found

.select("viewable_by, locked") --> SELECT viewable_by, locked FROM

.select(:name).distinct --> SELECT DISTINCT name FROM

.limit(5).offset(30) --> SELECT * FROM clients LIMIT 5 OFFSET 30 , id begining with 30

.select("date(created_at) as ordered_date, sum(price) as total_price").group("date(created_at)") --> 

.group(:status).count

.having("sum(price) > ?", 100)

.unscope(:order) --> new: SELECT * FROM articles WHERE id > 10 LIMIT 20 (old: SELECT * FROM articles WHERE id > 10 ORDER BY id asc LIMIT 20)